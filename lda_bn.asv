% LDA analysis - written by Brandon Nanfito

% This script is meant to perform a linear discriminant analysis on the
% input data and output the performance of the model. The goal is the
% predict the condition of each trial (values of c) based on the response
% magnitude across the population of units (colum)
% INPUT:
%   1. r = o x n matrix of response magnitudes; n = number of units; o =
%   number of observations (trials)
%   2. c = condition labels for each observation o in the matrix r

% a = 1; ag = 1;
% r = distDat{a,ag}.rTrial;
% c = distDat{a,ag}.cTrial;

function [acc] = lda_bn(r,c)

    %remove observations with missing data
    missingObs = sum(isnan(r),2)>0;
    r = r(~missingObs,:);
    c = c(~missingObs);

    nObs = size(r,1);
    nVar = size(r,2);
    if size(c,1) ~= nObs
        c = c';
    end

%     %reorder observations (so cv splits do not correspond to repetitions)
%     shuffIdx = randperm(nObs);
%     r = r(shuffIdx,:);
%     c = c(shuffIdx);
    
    dirLbl = c;
    dirs = unique(dirLbl);
    oriLbl = mod(c,180);
    oris = unique(oriLbl);
    
    % divide data into n-folds for cross validation
    nFold = 5;
    foldLbl = repmat(1:nFold,1,floor(nObs/5));
    
    for cv = 1:nFold
        testIdx = foldLbl == cv;
        trainIdx = ~testIdx;
    
        dirMdl = fitcdiscr(r(trainIdx,:),dirLbl(trainIdx));
        oriMdl = fitcdiscr(r(trainIdx,:),oriLbl(trainIdx));
    
        predDir = predict(dirMdl,r(testIdx,:));
        predOri = predict(oriMdl,r(testIdx,:));
        accDir(cv) = sum(predDir == dirLbl(testIdx))/length(predDir);
        accOri(cv) = sum(predOri == oriLbl(testIdx))/length(predOri);

        for d1 = 1:length(dirs)
        for d2 = 1:length(dirs)
            confDir(d1,d2,cv)
        end
        end
        
        for o1 = 1:length(oris)
        for o2 = 1:length(oris)

        end
        end

        clear dirMdl oriMdl testIdx trainIdx
    end

    acc = [mean(accDir),mean(accOri)];

end