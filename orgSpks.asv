% Written by Brandon Nanfito
function [spks] = orgSpks(animal,unit,expt,probe,U,anaMode,dataFold)

    baseName = [animal '_u' unit '_' expt];
    physDir = fullfile(dataFold,'Ephys',animal,baseName);
    load(fullfile(physDir,[baseName '_id.mat']),'id');
    load(fullfile(physDir,[baseName '_trialInfo.mat']),'trialInfo');
    load(fullfile(physDir,[baseName '.analyzer']),'-mat','Analyzer');
    if strcmp(anaMode,'SU')
        load(fullfile(physDir,[baseName '_p' num2str(probe) '_spkSort.mat']),'spkSort');
        spkStruct = spkSort; 
        clear spkSort
    elseif strcmp(anaMode,'MU')
        load(fullfile(physDir,[baseName '_p' num2str(probe) '_MUspkMerge.mat']),'MUspkMerge');
        spkStruct = MUspkMerge;
        clear MUspkMerge
    end

    sf = id.sampleFreq;
    nTrials = length(trialInfo.triallist);
    nConds = length(unique(trialInfo.triallist));
    nReps = nTrials/nConds;
    nEpochs = length(trialInfo.eventTimes)/nTrials;
    if isempty(trialInfo.blankId)
        blank = zeros(1,nConds)==1;
    else
        blank = (1:nConds)==trialInfo.blankId;
    end
    stimPartL = 1; %if stimTime>1second --> only use stimPartL seconds of the stim
    stimPart = 1; %which stimPartL seconds to use; 1 = 1st stimPartL seconds

    predelay = getparam('predelay',Analyzer);
    stimTime = getparam('stim_time',Analyzer);
    postdelay = getparam('postdelay',Analyzer);

    trialStart = downsample(trialInfo.eventTimes,nEpochs);
    stimStart = downsample(trialInfo.eventTimes,nEpochs,1);
    stimEnd = downsample(trialInfo.eventTimes,nEpochs,2);
    trialEnd = downsample(trialInfo.eventTimes,nEpochs,3);

    if strcmp(anaMode,'SU')
        nUnits = max(spkStruct.unitid);
    elseif strcmp(anaMode,'MU')
        nUnits = id.probes(probe).nChannels;
    end

    for u = U %1:nUnits 
    
        if strcmp(anaMode,'SU')
            spks.info = spkStruct.unitinfo{u};
            spks.times = spkStruct.spktimes(spkStruct.unitid == u);
        elseif strcmp(anaMode,'MU')
            spks.info = 'MU';
            spks.times = spkStruct.spktimes(spkStruct.detCh== u);
        end

        spks.stimCent = [];

        for c = 1:nConds
            trials = find(trialInfo.triallist == c);
            for r = 1:nReps
                t = trials(r);
                
                % time vectors for different trial epochs
                tvPre       = stimStart(t)-(predelay*sf):stimStart(t)-1;
                tvPre_oneSec= stimStart(t)-(1*sf):stimStart(t)-1;
                tvStim      = stimStart(t):stimStart(t)+(stimTime*sf)-1;
                tvStim_part = stimStart(t) + ((stimPartL*(stimPart-1))*sf) : stimStart(t) +((stimPartL*stimPart)*sf) -1;
                tvPost      = stimStart(t)+(stimTime*sf):stimStart(t)+((stimTime+postdelay)*sf)-1;
                tvTrial     = [tvPre tvStim tvPost];

                spks.train(:,t) = ismember(tvTrial,spks.times);
                spks.stimCent = [spks.stimCent vertcat( (tvTrial( spks.train(:,t))-stimStart(t))/sf , ...
                                                                repmat(t,1,length(find(spks.train(:,t)))) ) ];

                baseSpkCount = length(find(ismember(tvPre_oneSec,spks.times)));
                baseFR = baseSpkCount/(length(tvPre_oneSec)/sf);
                spks.fr.base(r,c) = baseFR;

                if stimTime>1
                    stimSpkCount = sum(ismember(tvStim_part,spks.times));
                    stimFR = stimSpkCount/stimPartL;
                    spks.fr.stim(r,c) = stimFR;
                else
                    stimSpkCount = sum(ismember(tvStim,spks.times));
                    stimFR = stimSpkCount/stimTime;
                    spks.fr.stim(r,c) = stimFR;
                end

                spks.fr.bc(r,c) = stimFR-baseFR;

                s = spks.stimCent(1,:);
                tID = spks.stimCent(2,:);
                [values,edges] = histcounts(s(s<=1 & tID==t),-predelay:0.05:1);
%                 values = zscore(values);
                values = values(end-19:end);
                edges = edges(end-19:end);
                spks.psth_stim.values(r,:,c) = values;
                spks(u).psth_stim.binEdges(r,:,c) = edges;
                clear s tID values edges


            end
        end
    
    end


end